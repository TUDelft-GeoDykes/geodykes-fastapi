# coding: utf-8

"""
    Geodykes Web Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class Reading(BaseModel):
    """
    Reading
    """ # noqa: E501
    id: StrictInt
    crossection: StrictStr
    sensor_id: StrictInt
    sensor_name: StrictStr
    sensor_type: StrictStr
    sensor_location: List[Union[StrictFloat, StrictInt]]
    sensor_is_active: StrictBool
    location_in_topology: List[Union[StrictFloat, StrictInt]]
    unit: StrictStr
    value: Union[StrictFloat, StrictInt]
    time: datetime
    __properties: ClassVar[List[str]] = ["id", "crossection", "sensor_id", "sensor_name", "sensor_type", "sensor_location", "sensor_is_active", "location_in_topology", "unit", "value", "time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reading from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reading from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "crossection": obj.get("crossection"),
            "sensor_id": obj.get("sensor_id"),
            "sensor_name": obj.get("sensor_name"),
            "sensor_type": obj.get("sensor_type"),
            "sensor_location": obj.get("sensor_location"),
            "sensor_is_active": obj.get("sensor_is_active"),
            "location_in_topology": obj.get("location_in_topology"),
            "unit": obj.get("unit"),
            "value": obj.get("value"),
            "time": obj.get("time")
        })
        return _obj


