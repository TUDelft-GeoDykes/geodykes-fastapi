"""adding sensor dependency in readings

Revision ID: 768c5bef0f68
Revises: abb62721e019
Create Date: 2024-07-31 15:07:03.249747

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '768c5bef0f68'
down_revision: Union[str, None] = 'abb62721e019'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dyke',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('multisensor', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('topology',
    sa.Column('coordinates', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unit_of_measure',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('unit')
    )
    op.create_table('crossection',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('dyke_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('topology', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['dyke_id'], ['dyke.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('location_in_topology',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('coordinates', sa.JSON(), nullable=False),
    sa.Column('topology_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_unit_association',
    sa.Column('sensor_type_id', sa.Integer(), nullable=False),
    sa.Column('unit_of_measure_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_type.id'], ),
    sa.ForeignKeyConstraint(['unit_of_measure_id'], ['unit_of_measure.id'], ),
    sa.PrimaryKeyConstraint('sensor_type_id', 'unit_of_measure_id')
    )
    op.create_table('crossection_layer',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('crossection_id', sa.Integer(), nullable=False),
    sa.Column('top_topology_id', sa.Integer(), nullable=False),
    sa.Column('bottom_topology_id', sa.Integer(), nullable=False),
    sa.Column('soil_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['bottom_topology_id'], ['topology.id'], ),
    sa.ForeignKeyConstraint(['crossection_id'], ['crossection.id'], ),
    sa.ForeignKeyConstraint(['top_topology_id'], ['topology.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('sensor_type_id', sa.Integer(), nullable=False),
    sa.Column('location_in_topology_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['location_in_topology_id'], ['location_in_topology.id'], ),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reading',
    sa.Column('crossection_id', sa.Integer(), nullable=False),
    sa.Column('location_in_topology_id', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('sensor_type_id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['crossection_id'], ['crossection.id'], ),
    sa.ForeignKeyConstraint(['location_in_topology_id'], ['location_in_topology.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_type.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['unit_of_measure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reading')
    op.drop_table('sensor')
    op.drop_table('crossection_layer')
    op.drop_table('sensor_unit_association')
    op.drop_table('location_in_topology')
    op.drop_table('crossection')
    op.drop_table('unit_of_measure')
    op.drop_table('topology')
    op.drop_table('sensor_type')
    op.drop_table('dyke')
    # ### end Alembic commands ###
