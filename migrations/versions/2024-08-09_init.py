"""init

Revision ID: 20f9678efc01
Revises: 
Create Date: 2024-08-09 13:29:14.382050

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '20f9678efc01'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('deck',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dyke',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('multisensor', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('topology',
    sa.Column('coordinates', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unit_of_measure',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('unit', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('unit')
    )
    op.create_table('card',
    sa.Column('front', sa.String(), nullable=False),
    sa.Column('back', sa.String(), nullable=True),
    sa.Column('hint', sa.String(), nullable=True),
    sa.Column('deck_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['deck_id'], ['deck.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('deck_id', 'front', name='card_deck_id_front_uc')
    )
    op.create_table('crossection',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('dyke_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('topology', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['dyke_id'], ['dyke.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_unit_association',
    sa.Column('sensor_type_id', sa.Integer(), nullable=False),
    sa.Column('unit_of_measure_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_type.id'], ),
    sa.ForeignKeyConstraint(['unit_of_measure_id'], ['unit_of_measure.id'], ),
    sa.PrimaryKeyConstraint('sensor_type_id', 'unit_of_measure_id')
    )
    op.create_table('crossection_layer',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('crossection_id', sa.Integer(), nullable=False),
    sa.Column('top_topology_id', sa.Integer(), nullable=False),
    sa.Column('bottom_topology_id', sa.Integer(), nullable=False),
    sa.Column('soil_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['bottom_topology_id'], ['topology.id'], ),
    sa.ForeignKeyConstraint(['crossection_id'], ['crossection.id'], ),
    sa.ForeignKeyConstraint(['top_topology_id'], ['topology.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('location_in_topology',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('coordinates', sa.JSON(), nullable=False),
    sa.Column('crossection_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['crossection_id'], ['crossection.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('sensor_type_id', sa.Integer(), nullable=False),
    sa.Column('location_in_topology_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['location_in_topology_id'], ['location_in_topology.id'], ),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reading',
    sa.Column('crossection_id', sa.Integer(), nullable=False),
    sa.Column('location_in_topology_id', sa.Integer(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('sensor_type_id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['crossection_id'], ['crossection.id'], ),
    sa.ForeignKeyConstraint(['location_in_topology_id'], ['location_in_topology.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.ForeignKeyConstraint(['sensor_type_id'], ['sensor_type.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['unit_of_measure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reading_crossection_id'), 'reading', ['crossection_id'], unique=False)
    op.create_index(op.f('ix_reading_sensor_id'), 'reading', ['sensor_id'], unique=False)
    op.create_index(op.f('ix_reading_time'), 'reading', ['time'], unique=False)
    op.create_index(op.f('ix_reading_unit_id'), 'reading', ['unit_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_reading_unit_id'), table_name='reading')
    op.drop_index(op.f('ix_reading_time'), table_name='reading')
    op.drop_index(op.f('ix_reading_sensor_id'), table_name='reading')
    op.drop_index(op.f('ix_reading_crossection_id'), table_name='reading')
    op.drop_table('reading')
    op.drop_table('sensor')
    op.drop_table('location_in_topology')
    op.drop_table('crossection_layer')
    op.drop_table('sensor_unit_association')
    op.drop_table('crossection')
    op.drop_table('card')
    op.drop_table('unit_of_measure')
    op.drop_table('topology')
    op.drop_table('sensor_type')
    op.drop_table('dyke')
    op.drop_table('deck')
    # ### end Alembic commands ###
