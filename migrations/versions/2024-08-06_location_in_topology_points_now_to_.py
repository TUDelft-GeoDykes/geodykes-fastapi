"""location in topology points now to crossection instead of topology entity this is more intuitive and self explanatory

Revision ID: 6b5862874a1f
Revises: f2c91833c6e6
Create Date: 2024-08-06 10:51:26.497866

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '6b5862874a1f'
down_revision: Union[str, None] = 'f2c91833c6e6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('crossection', 'topology',
    #            existing_type=sa.VARCHAR(),
    #            type_=sa.JSON())
    op.execute('ALTER TABLE crossection ALTER COLUMN topology TYPE JSON USING topology::json')
    op.execute('ALTER TABLE crossection ALTER COLUMN topology TYPE VARCHAR USING topology::varchar')
    op.add_column('location_in_topology', sa.Column('crossection_id', sa.Integer(), nullable=False))
    op.drop_constraint('location_in_topology_topology_id_fkey', 'location_in_topology', type_='foreignkey')
    op.create_foreign_key(None, 'location_in_topology', 'crossection', ['crossection_id'], ['id'])
    op.drop_column('location_in_topology', 'topology_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('location_in_topology', sa.Column('topology_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'location_in_topology', type_='foreignkey')
    op.create_foreign_key('location_in_topology_topology_id_fkey', 'location_in_topology', 'topology', ['topology_id'], ['id'])
    op.drop_column('location_in_topology', 'crossection_id')
    # op.alter_column('crossection', 'topology',
    #            existing_type=sa.JSON(),
    #            type_=sa.VARCHAR(),
    #            existing_nullable=False)
    op.execute('ALTER TABLE crossection ALTER COLUMN topology TYPE VARCHAR USING topology::varchar')
    # ### end Alembic commands ###
